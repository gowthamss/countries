{"version":3,"sources":["redux/countries-reducer/countries.selector.js","redux/countries-reducer/countries.types.js","components/header/header.component.jsx","redux/countries-reducer/countries.actions.js","components/search/search.component.jsx","components/filter/filter.component.jsx","components/search-and-filter/search-and-filter.component.jsx","components/country/country.component.jsx","components/countries-list/countries-list.component.jsx","components/countries/countries.component.jsx","components/main/main.component.jsx","pages/country-details/country-details.component.jsx","containers/App.js","reportWebVitals.js","redux/countries-reducer/countries.reducer.js","redux/store.js","fontawesome.js","index.js"],"names":["stateSelector","state","selectCountries","createSelector","countries","selectRegions","Set","map","country","selectDarkMode","darkMode","selectSearchText","isPending","searchText","selectFilterOption","optionValue","selectCountriesOnSearchAndFilter","text","option","filter","name","toLowerCase","includes","region","COUNTRIES_REQUEST_PENDING","COUNTRIES_REQUEST_SUCCESS","COUNTRIES_REQUEST_FAILED","TOGGLE_DARK_MODE","SEARCH_COUNTRIES","FILTER_COUNTRIES","EMPTY_SEARCH_FIELD","mapStateToProps","createStructuredSelector","connect","dispatch","toggleDarkMode","type","className","onClick","icon","style","color","onSearchChange","event","searchtext","target","value","payload","id","placeholder","onChange","regions","onFilterCountries","defaultValue","index","SearchAndFilter","flag","population","capital","to","src","alt","filteredCountries","Countries","Main","this","props","onRequestCountries","console","log","match","React","Component","fetch","then","res","json","catch","error","emptySearchField","history","find","params","trim","nativeName","subregion","topLevelDomain","currencies","languages","borders","singleLanguages","language","individualCurrencies","currency","push","join","border","exact","path","component","CountryDetails","fontSize","position","bottom","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","persistConfig","key","storage","initialState","persistReducer","action","store","createStore","countriesReducer","applyMiddleware","thunk","persistor","persistStore","library","add","LightMoon","DarkMoon","faSearch","faLongArrowAltLeft","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6ZAEMA,EAAgB,SAAAC,GAAK,OAAIA,GAGlBC,EAAkBC,YAC3B,CAACH,IACD,SAAAC,GAAK,OAAIA,EAAMG,aAGNC,EAAgBF,YACzB,CAACD,IACD,SAAAE,GAAS,mBAAQ,IAAIE,IAAIF,EAAUG,KAAI,SAAAC,GAAO,OAAIA,EAAO,eAGhDC,EAAiBN,YAC1B,CAACH,IACD,SAAAC,GAAK,OAAIA,EAAMS,YAQNC,GALuBR,YAChC,CAACH,IACD,SAAAC,GAAK,OAAIA,EAAMW,aAGaT,YAC5B,CAACH,IACD,SAAAC,GAAK,OAAIA,EAAMY,eAGNC,EAAqBX,YAC9B,CAACH,IACD,SAAAC,GAAK,OAAIA,EAAMc,eAGNC,EAAmCb,YAC5C,CAACQ,EAAkBG,EAAoBZ,IACvC,SAACe,EAAMC,EAAQd,GAAf,OAA6BA,EAAUe,QAAO,SAAAX,GAAO,OAAKA,EAAQY,KAAKC,cAAcC,SAASL,EAAKI,gBAAoBb,EAAQe,OAAOF,gBAAkBH,EAAOG,oBCrCtJG,GDwD0BrB,YACnC,CAACD,EAAiBS,IAClB,SAACP,EAAWS,GAAZ,OAA2BT,EAAUe,QAAO,SAAAX,GAAO,OAAIA,EAAQY,KAAKC,cAAcC,SAAST,EAAWQ,qBAGnElB,YACnC,CAACD,EAAiBY,IAClB,SAACV,EAAWW,GAAZ,OAA4BX,EAAUe,QAAO,SAAAX,GAAO,OAAIA,EAAQe,OAAOF,gBAAkBN,EAAYM,oBC/DhE,6BAC5BI,EAA4B,4BAC5BC,EAA2B,2BAC3BC,EAAmB,mBACnBC,EAAmB,mBACnBC,EAAmB,mBACnBC,EAAqB,qB,sBCqB5BC,EAAkBC,YAAyB,CAC7CtB,SAAUD,IAOCwB,cAAQF,GAJI,SAACG,GAAD,MAAe,CACtCC,eAAgB,kBAAMD,ECtBW,CACjCE,KAAMT,QDwBKM,EAzBA,SAAC,GAAD,IAAGvB,EAAH,EAAGA,SAAUyB,EAAb,EAAaA,eAAb,OACX,0BAASE,UAAS,UAAK3B,EAAW,cAAgB,eAAhC,WAAlB,UACI,oBAAI2B,UAAU,OAAd,iCACA,sBAAKA,UAAU,QAAQC,QAASH,EAAhC,UACKzB,EACG,cAAC,IAAD,CACI6B,KAAM,CAAC,MAAO,QACdC,MAAO,CAAEC,MAAO,WAGpB,cAAC,IAAD,CAAiBF,KAAM,CAAC,MAAO,UAEnC,sBAAMF,UAAU,aAAhB,gC,gCEcNN,G,kBAAkBC,YAAyB,CAC7CtB,SAAUD,KAOCwB,cAAQF,GAJI,SAACG,GAAD,MAAe,CACtCQ,eAAgB,SAACC,GAAD,OAAWT,GDfAU,ECewBD,EAAME,OAAOC,MDfrB,CAC3CV,KAAMR,EACNmB,QAASH,KAFiB,IAACA,MCkBhBX,EAlCG,SAAC,GAAD,IAAGvB,EAAH,EAAGA,SAAUgC,EAAb,EAAaA,eAAb,OACd,sBACIL,UAAS,UACL3B,EAAW,kBAAoB,mBAD1B,eADb,UAKI,qBACI2B,UAAS,UACL3B,EAAW,mBAAqB,oBAD3B,gBADb,SAKI,cAAC,IAAD,CACI6B,KAAM,CAAC,MAAO,UACdF,UAAS,UAAK3B,EAAW,eAAiB,qBAGlD,uBACI2B,UAAS,UAAK3B,EAAW,cAAgB,eAAhC,WACT0B,KAAK,SACLY,GAAG,SACHC,YAAY,0BACZC,SAAUR,UCchBX,G,MAAkBC,YAAyB,CAC7CtB,SAAUD,EACV0C,QAAS9C,EACTU,YAAaD,KAOFmB,cAAQF,GAJI,SAACG,GAAD,MAAe,CACtCkB,kBAAmB,SAACT,GAAD,OAAWT,GFrBFhB,EEqB2ByB,EAAME,OAAOC,MFrB5B,CACxCV,KAAMP,EACNkB,QAAS7B,KAFkB,IAACA,MEwBjBe,EA1CS,SAAC,GAAD,IACpBvB,EADoB,EACpBA,SACAyC,EAFoB,EAEpBA,QACAC,EAHoB,EAGpBA,kBACArC,EAJoB,EAIpBA,YAJoB,OAMpB,qBAAKsB,UAAU,mBAAf,SACI,wBACIjB,KAAK,aACL4B,GAAG,kBACHX,UAAS,UACL3B,EAAW,uBAAyB,wBAD/B,oBAGTwC,SAAUE,EACVN,MAAO/B,EACPsC,aAAc,OARlB,SAUKF,EAAQ5C,KAAI,SAACgB,EAAQ+B,GAAT,OACT,wBACIjB,UAAS,UACL3B,EAAW,qBAAuB,sBAD7B,kBAIToC,MAAOvB,EALX,SAOKA,GAHI+B,aCtBVC,EAPS,kBACpB,sBAAKlB,UAAU,oBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,Q,sBCiCFN,EAAkBC,YAAyB,CAC7CtB,SAAUD,IAGCwB,cAAQF,EAARE,EArCC,SAAC,GAA2B,IAAzBzB,EAAwB,EAAxBA,QAASE,EAAe,EAAfA,SAChB8C,EAA4ChD,EAA5CgD,KAAMpC,EAAsCZ,EAAtCY,KAAMqC,EAAgCjD,EAAhCiD,WAAYlC,EAAoBf,EAApBe,OAAQmC,EAAYlD,EAAZkD,QACxC,OACI,sBACIrB,UAAS,UAAK3B,EAAW,eAAiB,gBAAjC,YADb,UAGA,qBAAK2B,UAAU,iBAAf,SACA,cAAC,IAAD,CAAMsB,GAAE,qBAAgBvC,EAAhB,KAAR,SACY,qBACIwC,IAAKJ,EACLK,IAAI,eACJxB,UAAU,qBAItB,sBAAKA,UAAU,4BAAf,UACA,cAAC,IAAD,CAAMsB,GAAE,qBAAgBvC,EAAhB,KAAR,SACI,oBAAIiB,UAAU,eAAd,SAA8BjB,MAE9B,oBAAGiB,UAAU,4BAAb,wBACe,+BAAOoB,OAEtB,oBAAGpB,UAAU,wBAAb,qBACY,+BAAOd,OAEnB,oBAAGc,UAAU,yBAAb,sBACa,+BAAOqB,gBChB9B3B,EAAkBC,YAAyB,CAC7C8B,kBAAmB9C,IAGRiB,cAAQF,EAARE,EAdO,SAAC,GAA2B,IAAzB6B,EAAwB,EAAxBA,kBACrB,OACI,qBAAKzB,UAAU,iBAAf,SACKyB,EAAkBvD,KAAI,SAACC,EAAS8C,GAAV,OACnB,cAAC,EAAD,CAAS9C,QAASA,EAAqBwC,GAAIM,EAAQ,GAAnBA,WCHjCS,G,MANG,SAAC,GAAD,IAAG3D,EAAH,EAAGA,UAAWM,EAAd,EAAcA,SAAd,OACd,qBAAK2B,UAAU,YAAf,SACI,cAAC,EAAD,CAAejC,UAAWA,EAAWM,SAAUA,QCGjDsD,E,uKACF,WACIC,KAAKC,MAAMC,uB,oBAGf,WAEI,OADAC,QAAQC,IAAIJ,KAAKC,MAAMI,OAEnB,sBAAKjC,UAAU,OAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,W,GAVGkC,IAAMC,WAoBVvC,cAAQ,MAJI,SAACC,GAAD,MAAe,CACtCiC,mBAAoB,kBAAMjC,GPZM,SAACA,GACjCA,EAAS,CAAEE,KAAMZ,IACjBiD,MAAM,wCACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACtE,GACH8B,EAAS,CAAEE,KAAMX,EAA2BsB,QAAS3C,OAExDyE,OAAM,SAACC,GAAD,OACH5C,EAAS,CAAEE,KAAMV,EAA0BqB,QAAS+B,cOOjD7C,CAAkC+B,GC+G3CjC,G,MAAkBC,YAAyB,CAC7C5B,UAAWF,EACXQ,SAAUD,KAOCwB,cAAQF,GAJI,SAACG,GAAD,MAAe,CACtC6C,iBAAkB,kBAAM7C,ER9GW,CACnCE,KAAMN,QQgHKG,EAxIQ,SAAC,GAMjB,IALHqC,EAKE,EALFA,MACAU,EAIE,EAJFA,QACA5E,EAGE,EAHFA,UACAM,EAEE,EAFFA,SACAqE,EACE,EADFA,iBAEMvE,EAAUJ,EAAU6E,MACtB,SAACzE,GAAD,OAAaA,EAAQY,OAASkD,EAAMY,OAAO9D,KAAK+D,UAGhD3B,EAWAhD,EAXAgD,KACApC,EAUAZ,EAVAY,KACAgE,EASA5E,EATA4E,WACA3B,EAQAjD,EARAiD,WACAlC,EAOAf,EAPAe,OACA8D,EAMA7E,EANA6E,UACA3B,EAKAlD,EALAkD,QACA4B,EAIA9E,EAJA8E,eACAC,EAGA/E,EAHA+E,WACAC,EAEAhF,EAFAgF,UACAC,EACAjF,EADAiF,QAGEC,EAAkBF,EAAUjF,KAAI,SAACoF,GAAD,OAAcA,EAASvE,QACvDwE,EAAuBL,EAAWhF,KAAI,SAACsF,GAAD,OAAcA,EAASzE,QACnE,OACI,0BAASiB,UAAU,eAAnB,UACI,qBAAKA,UAAU,qBAAf,SACI,yBACIA,UAAS,UACL3B,EAAW,gBAAkB,iBADxB,aAGT4B,QAAS,WACLyC,IACAC,EAAQc,KAAK,MANrB,UASKpF,EACG,cAAC,IAAD,CACI6B,KAAM,CAAC,MAAO,uBACdC,MAAO,CAAEC,MAAO,SAChBJ,UAAU,cAGd,cAAC,IAAD,CACIE,KAAM,CAAC,MAAO,uBACdF,UAAU,cAlBtB,YAwBJ,0BACIA,UAAS,UACL3B,EAAW,eAAiB,gBADvB,2BADb,UAKI,qBAAKkD,IAAKJ,EAAMK,IAAI,eAAexB,UAAU,iBAC7C,0BAASA,UAAU,kBAAnB,UACI,sBAAKA,UAAU,aAAf,UACI,sBAAKA,UAAU,4BAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BjB,IAC9B,oBAAGiB,UAAU,6BAAb,0BACiB,+BAAO+C,OAExB,oBAAG/C,UAAU,4BAAb,wBACe,+BAAOoB,OAEtB,oBAAGpB,UAAU,wBAAb,qBACY,+BAAOd,OAEnB,oBAAGc,UAAU,yBAAb,sBACa,+BAAOqB,OAEpB,oBAAGrB,UAAU,2BAAb,yBACgB,+BAAOgD,UAI3B,sBAAKhD,UAAU,4BAAf,UACI,oBAAGA,UAAU,wBAAb,+BACsB,+BAAOiD,OAE7B,oBAAGjD,UAAU,4BAAb,wBACgB,IACZ,+BAAOuD,EAAqBG,KAAK,WAErC,oBAAG1D,UAAU,2BAAb,uBACe,IACX,+BAAOqD,EAAgBK,KAAK,iBAIxC,qBAAK1D,UAAU,aAAf,SACI,sBAAKA,UAAU,4BAAf,UACI,qBACIA,UAAS,UACL3B,EACM,2BACA,4BAHD,wBADb,8BAOsB,OAEtB,qBAAK2B,UAAU,kBAAf,SACKoD,EAAQlF,KAAI,SAACyF,EAAQ1C,GAAT,OACT,sBACIjB,UAAS,UACL3B,EACM,sBACA,uBAHD,mBADb,SAQKsF,GAFI1C,yB,OC7FvCvB,EAAkBC,YAAyB,CAC7CtB,SAAUD,IAGCwB,cAAQF,EAARE,EA1BH,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SACX,OACI,sBAAK2B,UAAS,UAAK3B,EAAW,WAAa,YAA7B,QAAd,UACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOuF,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,cAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,mBAAmBC,UAAWnC,IAChD,cAAC,IAAD,CACIkC,KAAK,mBACLC,UAAWC,OAGnB,sBAAK5D,MAAO,CAAEC,MAAO,SAAU4D,SAAU,OAAQC,SAAU,WAAYC,OAAQ,IAAKC,MAAO,QAA3F,yBACiB,IACb,iCACI,oBAAIhE,MAAO,CAAEC,MAAO,OAAQ4D,SAAU,QAAtC,gC,QCdLI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iCCHRO,GAAgB,CAClBC,IAAK,OACLC,Q,QAAAA,GAGEC,GAAe,CACjBhH,UAAW,GACXQ,WAAW,EACXkE,MAAO,GACPpE,UAAU,EACVG,WAAY,GACZE,YAAa,IA+CFsG,gBAAeJ,IA5CL,WAAmC,IAAlChH,EAAiC,uDAAzBmH,GAAcE,EAAW,uCACvD,OAAQA,EAAOlF,MACX,KAAKT,EACD,OAAO,2BACA1B,GADP,IAEIS,UAAWT,EAAMS,WAEzB,KAAKc,EACD,OAAO,2BACAvB,GADP,IAEIW,WAAW,IAEnB,KAAKa,EACD,OAAO,2BACAxB,GADP,IAEIG,UAAWkH,EAAOvE,QAClBnC,WAAW,IAEnB,KAAKc,EACD,OAAO,2BACAzB,GADP,IAEI6E,MAAOwC,EAAOvE,QACdnC,WAAW,IAEnB,KAAKgB,EACD,OAAO,2BACA3B,GADP,IAEIY,WAAYyG,EAAOvE,UAE3B,KAAKlB,EACD,OAAO,2BACA5B,GADP,IAEIc,YAAauG,EAAOvE,UAE5B,KAAKjB,EACD,OAAO,2BACA7B,GADP,IAEIY,WAAY,KAEpB,QACI,OAAOZ,M,SCrDNsH,GAAQC,YAAYC,GAC7BC,YAAgBC,OAEPC,GAAYC,aAAaN,I,2BCJtCO,KAAQC,IACJC,KACAC,KACAC,KACAC,MCGJC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUf,MAAOA,GAAjB,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAaK,UAAWA,GAAxB,SACI,cAAC,EAAD,YAKhBW,SAASC,eAAe,SAM5B/B,M","file":"static/js/main.aa37289e.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nconst stateSelector = state => state;\r\n\r\n\r\nexport const selectCountries = createSelector(\r\n    [stateSelector],\r\n    state => state.countries\r\n)\r\n\r\nexport const selectRegions = createSelector(\r\n    [selectCountries],\r\n    countries => [...new Set(countries.map(country => country['region']))]\r\n);\r\n\r\nexport const selectDarkMode = createSelector(\r\n    [stateSelector],\r\n    state => state.darkMode\r\n)\r\n\r\nexport const selectIsPendingState = createSelector(\r\n    [stateSelector],\r\n    state => state.isPending\r\n)\r\n\r\nexport const selectSearchText = createSelector(\r\n    [stateSelector],\r\n    state => state.searchText\r\n)\r\n\r\nexport const selectFilterOption = createSelector(\r\n    [stateSelector],\r\n    state => state.optionValue\r\n)\r\n\r\nexport const selectCountriesOnSearchAndFilter = createSelector(\r\n    [selectSearchText, selectFilterOption, selectCountries],\r\n    (text, option, countries) => countries.filter(country => (country.name.toLowerCase().includes(text.toLowerCase())) && (country.region.toLowerCase() === option.toLowerCase()))\r\n)\r\n\r\nexport const selectCountryDetails = (countryNameParam) => createSelector(\r\n    [selectCountries],\r\n    countries => {\r\n        console.log('countries: ', countries)\r\n        countries.find(country => {\r\n            if (country.name === countryNameParam) {\r\n                console.log(country)\r\n            }\r\n            console.log(countryNameParam)\r\n            return country.name === countryNameParam\r\n        })\r\n    }\r\n)\r\n\r\n\r\n// Individual selectors for search and filter. These are not used because a combined selector is written above named selectCountriesOnSearchAndFilter\r\nexport const selectCountriesOnSearch = createSelector(\r\n    [selectCountries, selectSearchText],\r\n    (countries, searchText) => countries.filter(country => country.name.toLowerCase().includes(searchText.toLowerCase()))\r\n)\r\n\r\nexport const selectCountriesOnFilter = createSelector(\r\n    [selectCountries, selectFilterOption],\r\n    (countries, optionValue) => countries.filter(country => country.region.toLowerCase() === optionValue.toLowerCase())\r\n)","export const COUNTRIES_REQUEST_PENDING = 'COUNTRIES_REQUEST_PENDING';\r\nexport const COUNTRIES_REQUEST_SUCCESS = 'COUNTRIES_REQUEST_SUCCESS';\r\nexport const COUNTRIES_REQUEST_FAILED = 'COUNTRIES_REQUEST_FAILED';\r\nexport const TOGGLE_DARK_MODE = 'TOGGLE_DARK_MODE';\r\nexport const SEARCH_COUNTRIES = 'SEARCH_COUNTRIES';\r\nexport const FILTER_COUNTRIES = 'FILTER_COUNTRIES';\r\nexport const EMPTY_SEARCH_FIELD = 'EMPTY_SEARCH_FIELD';","import React from \"react\";\r\nimport \"./header.styles.scss\";\r\n\r\nimport { selectDarkMode } from \"../../redux/countries-reducer/countries.selector\";\r\nimport { toggleDarkMode } from \"../../redux/countries-reducer/countries.actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Header = ({ darkMode, toggleDarkMode }) => (\r\n    <section className={`${darkMode ? \"header-dark\" : \"header-light\"} header`}>\r\n        <h2 className=\"logo\">Where in the world!</h2>\r\n        <div className=\"theme\" onClick={toggleDarkMode}>\r\n            {darkMode ? (\r\n                <FontAwesomeIcon\r\n                    icon={[\"fas\", \"moon\"]}\r\n                    style={{ color: \"white\" }}\r\n                />\r\n            ) : (\r\n                <FontAwesomeIcon icon={[\"far\", \"moon\"]} />\r\n            )}\r\n            <span className=\"theme-mode\">Dark Mode</span>\r\n        </div>\r\n    </section>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    darkMode: selectDarkMode,\r\n});\r\n\r\nconst mapStateToDispatch = (dispatch) => ({\r\n    toggleDarkMode: () => dispatch(toggleDarkMode()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapStateToDispatch)(Header);\r\n\r\n// <i class=\"fas fa-moon\"></i>\r\n// <i class=\"far fa-moon\"></i>\r\n","import {\r\n    TOGGLE_DARK_MODE,\r\n    COUNTRIES_REQUEST_PENDING,\r\n    COUNTRIES_REQUEST_SUCCESS,\r\n    COUNTRIES_REQUEST_FAILED,\r\n    SEARCH_COUNTRIES,\r\n    FILTER_COUNTRIES,\r\n    EMPTY_SEARCH_FIELD\r\n} from \"./countries.types\";\r\n\r\nexport const toggleDarkMode = () => ({\r\n    type: TOGGLE_DARK_MODE,\r\n});\r\n\r\nexport const fetchCountries = () => (dispatch) => {\r\n    dispatch({ type: COUNTRIES_REQUEST_PENDING });\r\n    fetch(\"https://restcountries.eu/rest/v2/all\")\r\n        .then((res) => res.json())\r\n        .then((countries) => {\r\n            dispatch({ type: COUNTRIES_REQUEST_SUCCESS, payload: countries });\r\n        })\r\n        .catch((error) =>\r\n            dispatch({ type: COUNTRIES_REQUEST_FAILED, payload: error })\r\n        );\r\n};\r\n\r\nexport const setSearchField = (searchtext) => ({\r\n    type: SEARCH_COUNTRIES,\r\n    payload: searchtext,\r\n});\r\n\r\nexport const setFilterOption = (option) => ({\r\n    type: FILTER_COUNTRIES,\r\n    payload: option,\r\n});\r\n\r\nexport const emptySearchField = () => ({\r\n    type: EMPTY_SEARCH_FIELD\r\n})","import React from \"react\";\r\nimport \"./search.styles.scss\";\r\n\r\nimport { selectDarkMode } from \"../../redux/countries-reducer/countries.selector\";\r\nimport { setSearchField } from \"../../redux/countries-reducer/countries.actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst SearchBox = ({ darkMode, onSearchChange }) => (\r\n    <div\r\n        className={`${\r\n            darkMode ? \"search-box-dark\" : \"search-box-light\"\r\n        } search-box`}\r\n    >\r\n        <div\r\n            className={`${\r\n                darkMode ? \"search-icon-dark\" : \"search-icon-light\"\r\n            } search-icon`}\r\n        >\r\n            <FontAwesomeIcon\r\n                icon={[\"fas\", \"search\"]}\r\n                className={`${darkMode ? \"fs-icon-dark\" : \"fs-icon-light\"}`}\r\n            />\r\n        </div>\r\n        <input\r\n            className={`${darkMode ? \"search-dark\" : \"search-light\"} search`}\r\n            type=\"search\"\r\n            id=\"search\"\r\n            placeholder=\"Search for a country...\"\r\n            onChange={onSearchChange}\r\n        />\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    darkMode: selectDarkMode,\r\n});\r\n\r\nconst mapStateToDispatch = (dispatch) => ({\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapStateToDispatch)(SearchBox);\r\n\r\n// style={{ position: \"absolute\", left: \"10px\", content: \"\\f002\" }}\r\n","import React from \"react\";\r\nimport \"./filter.styles.scss\";\r\n\r\nimport {\r\n    selectDarkMode,\r\n    selectRegions,\r\n    selectFilterOption,\r\n} from \"../../redux/countries-reducer/countries.selector\";\r\nimport { setFilterOption } from \"../../redux/countries-reducer/countries.actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nconst FilterCoutnries = ({\r\n    darkMode,\r\n    regions,\r\n    onFilterCountries,\r\n    optionValue,\r\n}) => (\r\n    <div className=\"filter-countries\">\r\n        <select\r\n            name=\"continents\"\r\n            id=\"filter-dropdown\"\r\n            className={`${\r\n                darkMode ? \"filter-dropdown-dark\" : \"filter-dropdown-light\"\r\n            } filter-dropdown`}\r\n            onChange={onFilterCountries}\r\n            value={optionValue}\r\n            defaultValue={\"Asia\"}\r\n        >\r\n            {regions.map((region, index) => (\r\n                <option\r\n                    className={`${\r\n                        darkMode ? \"filter-option-dark\" : \"filter-option-light\"\r\n                    } filter-option`}\r\n                    key={index}\r\n                    value={region}\r\n                >\r\n                    {region}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    darkMode: selectDarkMode,\r\n    regions: selectRegions,\r\n    optionValue: selectFilterOption,\r\n});\r\n\r\nconst mapStateToDispatch = (dispatch) => ({\r\n    onFilterCountries: (event) => dispatch(setFilterOption(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapStateToDispatch)(FilterCoutnries);\r\n","import React from \"react\";\r\nimport \"./search-and-filter.styles.scss\";\r\n\r\nimport SearchBox from \"../search/search.component\";\r\nimport FilterCoutnries from \"../filter/filter.component\";\r\n\r\nconst SearchAndFilter = () => (\r\n    <div className=\"search-and-filter\">\r\n        <SearchBox />\r\n        <FilterCoutnries />\r\n    </div>\r\n);\r\n\r\nexport default SearchAndFilter;\r\n","import React from \"react\";\r\nimport \"./country.styles.scss\";\r\n\r\nimport { selectDarkMode } from \"../../redux/countries-reducer/countries.selector\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Country = ({ country, darkMode }) => {\r\n    const { flag, name, population, region, capital } = country;\r\n    return (\r\n        <div\r\n            className={`${darkMode ? \"country-dark\" : \"country-light\"} country`}\r\n        >\r\n        <div className=\"flag-container\">\r\n        <Link to={`/countries/${name} `}>\r\n                    <img\r\n                        src={flag}\r\n                        alt=\"country flag\"\r\n                        className=\"country-flag\"\r\n                    />\r\n                </Link>\r\n            </div>\r\n            <div className=\"country-details-container\">\r\n            <Link to={`/countries/${name} `}>\r\n                <h2 className=\"country-name\">{name}</h2>\r\n                </Link>\r\n                <p className=\"country-population detail\">\r\n                    Populaton: <span>{population}</span>\r\n                </p>\r\n                <p className=\"country-region detail\">\r\n                    Region: <span>{region}</span>\r\n                </p>\r\n                <p className=\"country-capital detail\">\r\n                    Capital: <span>{capital}</span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    darkMode: selectDarkMode,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Country);\r\n","import React from \"react\";\r\nimport \"./countries-list.styles.scss\";\r\n\r\nimport Country from \"../country/country.component\";\r\nimport { selectCountriesOnSearchAndFilter } from \"../../redux/countries-reducer/countries.selector\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nconst CountriesList = ({ filteredCountries }) => {\r\n    return (\r\n        <div className=\"countries-list\">\r\n            {filteredCountries.map((country, index) => (\r\n                <Country country={country} key={index} id={index + 1} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    filteredCountries: selectCountriesOnSearchAndFilter,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CountriesList);\r\n","import React from \"react\";\r\nimport CountriesList from \"../countries-list/countries-list.component\";\r\nimport \"./countries.styles.scss\";\r\n\r\nconst Countries = ({ countries, darkMode }) => (\r\n    <div className=\"countries\">\r\n        <CountriesList countries={countries} darkMode={darkMode} />\r\n    </div>\r\n);\r\n\r\nexport default Countries;\r\n","import React from \"react\";\r\nimport \"./main.styles.scss\";\r\n\r\nimport SearchAndFilter from \"../search-and-filter/search-and-filter.component\";\r\nimport Countries from \"../countries/countries.component\";\r\nimport { fetchCountries } from \"../../redux/countries-reducer/countries.actions\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Main extends React.Component {\r\n    componentDidMount() {\r\n        this.props.onRequestCountries();\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.match);\r\n        return (\r\n            <div className=\"main\">\r\n                <SearchAndFilter />\r\n                <Countries />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToDispatch = (dispatch) => ({\r\n    onRequestCountries: () => dispatch(fetchCountries()),\r\n});\r\n\r\nexport default connect(null, mapStateToDispatch)(Main);\r\n","import React from \"react\";\r\nimport \"./country-details.styles.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport {\r\n    selectDarkMode,\r\n    selectCountries,\r\n} from \"../../redux/countries-reducer/countries.selector\";\r\nimport { emptySearchField } from \"../../redux/countries-reducer/countries.actions\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst CountryDeatils = ({\r\n    match,\r\n    history,\r\n    countries,\r\n    darkMode,\r\n    emptySearchField,\r\n}) => {\r\n    const country = countries.find(\r\n        (country) => country.name === match.params.name.trim()\r\n    );\r\n    const {\r\n        flag,\r\n        name,\r\n        nativeName,\r\n        population,\r\n        region,\r\n        subregion,\r\n        capital,\r\n        topLevelDomain,\r\n        currencies,\r\n        languages,\r\n        borders,\r\n    } = country;\r\n\r\n    const singleLanguages = languages.map((language) => language.name);\r\n    const individualCurrencies = currencies.map((currency) => currency.name);\r\n    return (\r\n        <section className=\"country-page\">\r\n            <div className=\"back-btn-container\">\r\n                <button\r\n                    className={`${\r\n                        darkMode ? \"back-btn-dark\" : \"back-btn-light\"\r\n                    } back-btn`}\r\n                    onClick={() => {\r\n                        emptySearchField();\r\n                        history.push(\"/\");\r\n                    }}\r\n                >\r\n                    {darkMode ? (\r\n                        <FontAwesomeIcon\r\n                            icon={[\"fas\", \"long-arrow-alt-left\"]}\r\n                            style={{ color: \"white\" }}\r\n                            className=\"back-icon\"\r\n                        />\r\n                    ) : (\r\n                        <FontAwesomeIcon\r\n                            icon={[\"fas\", \"long-arrow-alt-left\"]}\r\n                            className=\"back-icon\"\r\n                        />\r\n                    )}\r\n                    Back\r\n                </button>\r\n            </div>\r\n            <section\r\n                className={`${\r\n                    darkMode ? \"country-dark\" : \"country-light\"\r\n                } country country-detail`}\r\n            >\r\n                <img src={flag} alt=\"country flag\" className=\"country-flag\" />\r\n                <section className=\"details-section\">\r\n                    <div className=\"container1\">\r\n                        <div className=\"country-details-container\">\r\n                            <h2 className=\"country-name\">{name}</h2>\r\n                            <p className=\"country-native-name detail\">\r\n                                Native Name: <span>{nativeName}</span>\r\n                            </p>\r\n                            <p className=\"country-population detail\">\r\n                                Populaton: <span>{population}</span>\r\n                            </p>\r\n                            <p className=\"country-region detail\">\r\n                                Region: <span>{region}</span>\r\n                            </p>\r\n                            <p className=\"country-capital detail\">\r\n                                Capital: <span>{capital}</span>\r\n                            </p>\r\n                            <p className=\"country-subregion detail\">\r\n                                Sub Region: <span>{subregion}</span>\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"country-details-container\">\r\n                            <p className=\"country-domain detail\">\r\n                                Top Level Domain: <span>{topLevelDomain}</span>\r\n                            </p>\r\n                            <p className=\"country-currencies detail\">\r\n                                Currencies:{\" \"}\r\n                                <span>{individualCurrencies.join(\", \")}</span>\r\n                            </p>\r\n                            <p className=\"country-languages detail\">\r\n                                Languages:{\" \"}\r\n                                <span>{singleLanguages.join(\", \")}</span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container2\">\r\n                        <div className=\"country-details-container\">\r\n                            <h3\r\n                                className={`${\r\n                                    darkMode\r\n                                        ? \"country-border-text-dark\"\r\n                                        : \"country-border-text-light\"\r\n                                } country-border-text`}\r\n                            >\r\n                                Border Countries:{\" \"}\r\n                            </h3>\r\n                            <div className=\"country-borders\">\r\n                                {borders.map((border, index) => (\r\n                                    <span\r\n                                        className={`${\r\n                                            darkMode\r\n                                                ? \"country-border-dark\"\r\n                                                : \"country-border-light\"\r\n                                        } country-border`}\r\n                                        key={index}\r\n                                    >\r\n                                        {border}\r\n                                    </span>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </section>\r\n        </section>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    countries: selectCountries,\r\n    darkMode: selectDarkMode,\r\n});\r\n\r\nconst matStateToDispatch = (dispatch) => ({\r\n    emptySearchField: () => dispatch(emptySearchField()),\r\n});\r\n\r\nexport default connect(mapStateToProps, matStateToDispatch)(CountryDeatils);\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Header from \"../components/header/header.component\";\nimport Main from \"../components/main/main.component\";\nimport { selectDarkMode } from \"../redux/countries-reducer/countries.selector\";\nimport CountryDetails from \"../pages/country-details/country-details.component\";\n\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { Switch, Route } from \"react-router\";\n\nconst App = ({ darkMode }) => {\n    return (\n        <div className={`${darkMode ? \"App-dark\" : \"App-light\"} App`}>\n            <Header />\n            <Switch>\n                <Route exact path=\"/\" component={Main} />\n                <Route exact path=\"/react-countries\" component={Main} />\n                <Route                    \n                    path=\"/countries/:name\"\n                    component={CountryDetails}\n                />\n            </Switch>\n            <div style={{ color: \"salmon\", fontSize: \"12px\", position: \"absolute\", bottom: \"0\", width: \"100%\" }}>\n                Developed by{\" \"}\n                <strong>\n                    <em style={{ color: \"teal\", fontSize: \"14px\" }}>Gowtham</em>\n                </strong>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector({\n    darkMode: selectDarkMode,\n});\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { TOGGLE_DARK_MODE, COUNTRIES_REQUEST_PENDING, COUNTRIES_REQUEST_SUCCESS, COUNTRIES_REQUEST_FAILED, SEARCH_COUNTRIES, FILTER_COUNTRIES, EMPTY_SEARCH_FIELD } from './countries.types';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst initialState = {\r\n    countries: [],\r\n    isPending: false,\r\n    error: '',\r\n    darkMode: false,\r\n    searchText: '',\r\n    optionValue: ''\r\n}\r\n\r\nconst countriesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_DARK_MODE:\r\n            return {\r\n                ...state,\r\n                darkMode: !state.darkMode\r\n            }\r\n        case COUNTRIES_REQUEST_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case COUNTRIES_REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                countries: action.payload,\r\n                isPending: false\r\n            }\r\n        case COUNTRIES_REQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isPending: false\r\n            }\r\n        case SEARCH_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                searchText: action.payload\r\n            }\r\n        case FILTER_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                optionValue: action.payload\r\n            }\r\n        case EMPTY_SEARCH_FIELD:\r\n            return {\r\n                ...state,\r\n                searchText: ''\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default persistReducer(persistConfig, countriesReducer);","import { createStore, applyMiddleware } from 'redux';\r\nimport countriesReducer from './countries-reducer/countries.reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nexport const store = createStore(countriesReducer,\r\n    applyMiddleware(thunk))\r\n\r\nexport const persistor = persistStore(store);\r\n\r\n// export default store;","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faMoon as LightMoon } from '@fortawesome/free-regular-svg-icons';\r\nimport { faMoon as DarkMoon, faSearch, faLongArrowAltLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(\r\n    LightMoon,\r\n    DarkMoon,\r\n    faSearch,\r\n    faLongArrowAltLeft\r\n)","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store, persistor } from \"./redux/store\";\nimport \"./fontawesome\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <PersistGate persistor={persistor}>\n                    <App />\n                </PersistGate>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}